//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Harry/Scripts/MiniMapControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MiniMapControlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MiniMapControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MiniMapControlls"",
    ""maps"": [
        {
            ""name"": ""MiniMap"",
            ""id"": ""2b1b068d-49c0-48c7-a5b5-6b4693aefa36"",
            ""actions"": [
                {
                    ""name"": ""OpenMediumMapSize"",
                    ""type"": ""Button"",
                    ""id"": ""76fa5a0c-77b1-4190-a803-a84fde1c0a13"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ea6e9fb-1d54-4154-8ede-4fc6ffec599d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenMediumMapSize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MiniMap
        m_MiniMap = asset.FindActionMap("MiniMap", throwIfNotFound: true);
        m_MiniMap_OpenMediumMapSize = m_MiniMap.FindAction("OpenMediumMapSize", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MiniMap
    private readonly InputActionMap m_MiniMap;
    private IMiniMapActions m_MiniMapActionsCallbackInterface;
    private readonly InputAction m_MiniMap_OpenMediumMapSize;
    public struct MiniMapActions
    {
        private @MiniMapControlls m_Wrapper;
        public MiniMapActions(@MiniMapControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenMediumMapSize => m_Wrapper.m_MiniMap_OpenMediumMapSize;
        public InputActionMap Get() { return m_Wrapper.m_MiniMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MiniMapActions set) { return set.Get(); }
        public void SetCallbacks(IMiniMapActions instance)
        {
            if (m_Wrapper.m_MiniMapActionsCallbackInterface != null)
            {
                @OpenMediumMapSize.started -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnOpenMediumMapSize;
                @OpenMediumMapSize.performed -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnOpenMediumMapSize;
                @OpenMediumMapSize.canceled -= m_Wrapper.m_MiniMapActionsCallbackInterface.OnOpenMediumMapSize;
            }
            m_Wrapper.m_MiniMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @OpenMediumMapSize.started += instance.OnOpenMediumMapSize;
                @OpenMediumMapSize.performed += instance.OnOpenMediumMapSize;
                @OpenMediumMapSize.canceled += instance.OnOpenMediumMapSize;
            }
        }
    }
    public MiniMapActions @MiniMap => new MiniMapActions(this);
    public interface IMiniMapActions
    {
        void OnOpenMediumMapSize(InputAction.CallbackContext context);
    }
}
